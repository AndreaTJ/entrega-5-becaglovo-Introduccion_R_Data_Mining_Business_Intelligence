---
title: "practica_final"
format: html
editor: visual
---

Vamos a utilizar el dataset de semillas que se encuentra aquí: https://archive.ics.uci.edu/ml/datasets/seeds#

Primero vamos a descargarnos el dataset con el siguiente comando:

```{r}
library(tidyverse)
df_seeds <- read.table('https://archive.ics.uci.edu/ml/machine-learning-databases/00236/seeds_dataset.txt', col.names =c('area','perimetro','compacto','longitud','anchura','coeficient.asimetria','longitud.ranura','tipo'))
```

#### PREGUNTA 1 (0.5pt)

¿Cuantas filas y cuantas columnas tiene el dataframe df_seeds?

**Respuesta**:

```{r}

dimension <- dim(df_seeds)

paste('El numero de filas que tiene el dataframe df_seeds es:', dimension[1])
paste('El numero de columnas que tiene el dataframe df_seeds es:', dimension[2])
```

#### PREGUNTA 2 (0.5pt)

Vamos a convertir en factor la columna tipo. Vamos a reemplazar los números por su correspondiente etiqueta (label). La correspondencia entre el código y el tipo es:

-   1 - Kama
-   2 - Rosa
-   3 - Canadian

Convierte en factor la columna tipo, respetando las etiquetas:

**Respuesta**:

```{r}

df_seeds$tipo <- factor(df_seeds$tipo, levels = c("1", "2", "3"), labels = c("Kama", "Rosa", "Canadian"))

summary(df_seeds['tipo'])    
```

#### PREGUNTA 3 (1pt)

¿Cual es la media del area de cada uno de los tipos?

**Respuesta**

```{r}

df_seeds |>
  group_by(tipo) |>
  summarise(media_area=mean(area))

```

#### PREGUNTA 4 (0.5pt)

¿Como se llama el siguiente tipo de gráfico?. ¿Qué representa la línea del centro de la caja?

```{r}
ggplot(df_seeds, aes(x=tipo, y=area)) + geom_boxplot()
```

**Respuesta**:

El gráfico se llama boxplot o diagrama de caja y bigotes.

La línea del centro de la caja se llama **mediana** o **segundo cuartil (Q2).**. La mediana es el valor que divide al conjunto de datos en dos partes iguales: el 50% de los datos son menores que la mediana y el 50% son mayores.

En el gráfico, se muestra la mediana del área de las semillas para los tres tipos: Kama, Rosa y Canadian. La disposición y tamaño de las cajas nos permite comparar visualmente la dispersión de las medidas de área entre los diferentes tipos de semillas.

#### PREGUNTA 5 (1.5pt)

¿Como pintarías un diagrama de puntos (o scatterplot) con ggplot con las siguientes características? - En el eje X la variable compacto - En el eje Y la variable area - Cada tipo de semilla debería tener un color diferente

**Respuesta**:

```{r}
ggplot(data=df_seeds, aes(x=compacto, y=area, color=tipo)) + 
  geom_point()+
  labs(x = "Compacto", y = "Área", title = "Diagrama de Puntos por Tipo de Semilla") +
  theme_bw()
```

#### PREGUNTA 6 (0.5pt)

¿Qué hace la siguiente línea?:

```{r}
df_seeds |> mutate(is_kama = tipo=='Kama') -> df_seeds
```

**Respuesta**:

Esta línea de código, se coge el dataframe de **df_seeds,** y usando la función mutate(), se le añade una **variable**(columna) que se llama **is_kama**. En esta nueva columna se indica, con True, si el tipo de semilla es 'Kama' , y False en otro caso. Luego, se sobreescribe el dataframe **df_seeds**, con la version modificada del dataframe que incluye la columna **is_kama.**

#### PREGUNTA 7 (1.5pt)

Vamos a dividir el conjunto de datos en test y training porque vamos a entrenar un modelo que me permita diferenciar si una semilla es de tipo Kama o no. ¿Por qué es aconsejable dividir el dataset en los grupos de train y test?

```{r}
set.seed(123) # Este set.seed hace que a todos nos generen los mismos número aleatorios
idx <- sample(1:nrow(df_seeds), 0.7*nrow(df_seeds))
df_seeds_train <- df_seeds[idx,]
df_seeds_test <- df_seeds[-idx,]
```

**Respuesta**:

Es aconsejable dividir el dataset en los grupos de train y test para evitar el sobreajuste. El grupo training se usa durante el entrenamiento del modelo, y luego, para evaluar el modelo se usa el grupo de test. Esto asegura que el modelo pueda funcionar bien con datos nuevos y no solo con los datos con los que se ha entrenado.

#### PREGUNTA 8 (1pt)

Vamos a crear un modelo para realizar una clasificación binaria, donde le pasaremos como entrada las columnas: area, perimetro, compacto, longitud, coeficient.asimetria y longitud.ranura

¿Qué tipo de algoritmo o modelo debería usar?

**Respuesta**:

Dado que necesitamos realizar una clasificación binaria, el tipo de algoritmo o modelo que deberíamos usar sería la **Regresión Logística**.

#### PREGUNTA 9 (1pt)

Crea un modelo que me permita clasificar si una semilla es de tipo Kama o no con las siguientes columnas: area, perimetro, compacto, longitud, coeficient.asimetria, longitud.ranura

**Respuesta**:

```{r}

modelo1 <- glm(data = df_seeds_train, 
               is_kama ~ area + perimetro + compacto + longitud + coeficient.asimetria + longitud.ranura,
               family='binomial')

summary(modelo1)
```

#### PREGUNTA 10 (1pt)

Si usamos un umbral de 0 en la salida del modelo (lo que equivale a probabilidad de 0.5 cuando usamos el predict con type='response') ¿Cuales son los valores de precisión y exhausitividad?

**Respuesta**.

```{r}

predicciones <- predict(modelo1, newdata = df_seeds_test, type = "response")
clases_predichas <- ifelse(predicciones >= 0.5, TRUE, FALSE)

confusion_matrix <- table(Predicho = clases_predichas, Real = df_seeds_test$is_kama)

confusion_matrix

precision <- confusion_matrix[2,2] / sum(confusion_matrix[2,])
recall <- confusion_matrix[2,2] / sum(confusion_matrix[,2])

paste("La proporción en que el modelo predijo que era Kama  y era correcto es de", round(precision,2))
paste("La proporción en que el modelo predijo correctamente que era Kama, de todos los casos que realmente eran Kama, es de", round(recall, 2))
```

#### PREGUNTA 11 (1.5pt)

¿Qué están haciendo las siguientes líneas?

```{r}
set.seed(123)
cl<-df_seeds |> select(area,perimetro,compacto,longitud,anchura,coeficient.asimetria,longitud.ranura) |> kmeans(3)
table(real=df_seeds$tipo,cluster=cl$cluster)
```

**Respuesta**:

`set.seed(123)` - Se utiliza para hacer que los resultados sean reproducibles. Es una semilla fija, que hace que cada vez que se corra el código, se obtengan los mismos clústeres.

`cl<-df_seeds |> select(area,perimetro,compacto,longitud,anchura,coeficient.asimetria,longitud.ranura) |> kmeans(3)` - Encontramos `df_seeds` que es el dataframe que tiene los datos. Después `|>` que es el operador de pipeline de R, que se usa para pasar el resultado de una función a otra. Tras esto, está la función select(), que selecciona solo ciertas columnas del dataframe. La última función es la de kmeans(3) que aplica el algoritmo de k-means a los datos seleccionados, dividiendolos en 3 clusteres. Todo ello, se almacena en la variable `cl`

`table(real=df_seeds$tipo,cluster=cl$cluster)` - Se crea una tabla de contingencia que compara la clasificación real de las semillas con los clusteres asignados por el algoritmo kmeans.

Esto es últil para saber cuán bien el algoritmo kmeans() ha agrupado las semillas, con respecto a las agrupaciones reales.
